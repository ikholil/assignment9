generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  role      String     @default("customer")
  bookings  Booking[]
  reviews   Review[]
  profile   Profile?
  feedBack  FeedBack[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  blogs     Blog[]

  @@map("users")
}

model Profile {
  id         String    @id @default(uuid())
  contactNo  String?
  address    String?
  profileImg String?
  bio        String?
  gender     String?
  birthDate  DateTime?
  userId     String    @unique
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Service {
  id           String    @id @default(uuid())
  title        String
  price        Int
  description  String
  availability Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  bookings     Booking[]
  reviews      Review[]

  @@map("services")
}

model Booking {
  id        String   @id @default(uuid())
  status    String   @default("pending")
  date      DateTime
  serviceId String
  userId    String
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  service   Service  @relation(fields: [serviceId], references: [id])

  @@map("bookings")
}

model Review {
  id        String   @id @default(uuid())
  comment   String
  rating    Int
  serviceId String
  userId    String
  service   Service  @relation(fields: [serviceId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("reviews")
}

model FeedBack {
  id        String   @id @default(uuid())
  subject   String
  message   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("feedbacks")
}

model Blog {
  id        String   @id @default(uuid())
  title     String
  content   String
  thumbnail String?
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blogs")
}

model Faq {
  id       String @id @default(uuid())
  question String
  answer   String

  @@map("faqs")
}

// profile fields -> bio, birthdate, gender, age
